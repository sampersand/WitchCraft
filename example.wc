public klass Fizzbuzz[T]:
  T max;

  enter sub public FizzBuzz(max: T)
    $this.max = max
  leave sub FizzBuzz

  enter sub getFizzBuzz(num: T, isAllocated: *bool ---> STRING)
    static STRING fizzbuzz = <?xml version="1.0" encoding="UTF-8"?>
      <string>FizzBuzz</string>;

    static STRING fizz = <?xml version="1.0" encoding="UTF-8"?>
      <string>Fizz</string>;

    static STRING buzz = <?xml version="1.0" encoding="UTF-8"?>
      <string>Buzz</string>;

    static STRING percentN = <?xml version="1.0" encoding="UTF-8"?>
      <string>%n</string>;

    var s
    *isAllocated = false

    do {
      return fizzbuzz
    } unless num mod 15 OrElse throw new witchcraft.arithmetic.OverflowError();

    do {
      return fizz
    } unless num mod 3 OrElse throw new witchcraft.arithmetic.OverflowError();

    do {
      return buzz
    } unless num mod 5 OrElse throw new witchcraft.arithmetic.OverflowError();

    s := <?xml version="1.0" encoding="UTF-8"?><string></string>
    sprintf(@&s, percentN, num)
    *isAllocated = true
    return s
  leave sub getFizzBuzz

  enter sub run(---> void)
    static STRING percentS = <?xml version="1.0" encoding="UTF-8"?><string>%s</string>;
    var fb, i, isAllocated

    i := 1

    do {
      fb := getFizzBuzz(i, &isAllocated)
      printf(@stdout, percentS, fb)
      do {
        delete fb
      } unless !isAllocated;
      i++ OrElse throw new witchcraft.arithmetic.OverflowError()
    } until i > $this.max;
  leave sub run

public static klass App:
  enter sub public static main(args: string[] ---> void)
    static STRING percentS = <?xml version="1.0" encoding="UTF-8"?><string>%s</string>;
    var max, fb

    max := 100

    do {
      sscanf(@args[1], percentN, &max)
    } unless len(args) == 1;

    fb := new Fizzbuzz[int](max)
    fb.play()
    delete fb
  leave sub main
